{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\n// src/hooks/useStudentQueries.js\n\n// 1. ADD THE IMPORT STATEMENT HERE\nimport { getStudents, createStudent, updateStudent, deleteStudent } from '../services'; // Clean import from the central services export\n\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\n\n// This hook fetches the list of students\nexport const useGetStudents = (page, filters) => {\n  _s();\n  return useQuery({\n    // The queryKey is an array that uniquely identifies this data\n    queryKey: ['students', page, filters],\n    // The queryFn is the function that will be called to fetch the data.\n    // We now use our imported service function here.\n    queryFn: () => getStudents(page, 10, filters),\n    // This option prevents the UI from flickering when moving between pages\n    keepPreviousData: true\n  });\n};\n\n// This hook provides a function to create a new student\n_s(useGetStudents, \"4ZpngI1uv+Uo3WQHEZmTQ5FNM+k=\", false, function () {\n  return [useQuery];\n});\nexport const useCreateStudent = () => {\n  _s2();\n  const queryClient = useQueryClient();\n  return useMutation({\n    // The mutationFn is the function that performs the action (POST request).\n    // We use our imported service function here.\n    mutationFn: createStudent,\n    // After the mutation is successful, we invalidate the 'students' cache.\n    // This tells TanStack Query to automatically refetch the student list.\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['students']\n      });\n    }\n  });\n};\n\n// This hook provides a function to update a student\n_s2(useCreateStudent, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useUpdateStudent = () => {\n  _s3();\n  const queryClient = useQueryClient();\n  return useMutation({\n    // The mutation function now points to our updateStudent service\n    mutationFn: variables => updateStudent(variables.id, variables.data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['students']\n      });\n    }\n  });\n};\n\n// This hook provides a function to delete a student\n_s3(useUpdateStudent, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});\nexport const useDeleteStudent = () => {\n  _s4();\n  const queryClient = useQueryClient();\n  return useMutation({\n    // The mutation function now points to our deleteStudent service\n    mutationFn: deleteStudent,\n    onSuccess: () => {\n      queryClient.invalidateQueries({\n        queryKey: ['students']\n      });\n    }\n  });\n};\n_s4(useDeleteStudent, \"YK0wzM21ECnncaq5SECwU+/SVdQ=\", false, function () {\n  return [useQueryClient, useMutation];\n});","map":{"version":3,"names":["getStudents","createStudent","updateStudent","deleteStudent","useQuery","useMutation","useQueryClient","useGetStudents","page","filters","_s","queryKey","queryFn","keepPreviousData","useCreateStudent","_s2","queryClient","mutationFn","onSuccess","invalidateQueries","useUpdateStudent","_s3","variables","id","data","useDeleteStudent","_s4"],"sources":["D:/Web_Development_ReactJS_Expert/student-management-system/frontend/src/hooks/useStudentQueries.js"],"sourcesContent":["// src/hooks/useStudentQueries.js\r\n\r\n// 1. ADD THE IMPORT STATEMENT HERE\r\nimport { \r\n  getStudents, \r\n  createStudent, \r\n  updateStudent, \r\n  deleteStudent \r\n} from '../services'; // Clean import from the central services export\r\n\r\nimport { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';\r\n\r\n// This hook fetches the list of students\r\nexport const useGetStudents = (page, filters) => {\r\n  return useQuery({\r\n    // The queryKey is an array that uniquely identifies this data\r\n    queryKey: ['students', page, filters], \r\n    \r\n    // The queryFn is the function that will be called to fetch the data.\r\n    // We now use our imported service function here.\r\n    queryFn: () => getStudents(page, 10, filters),\r\n    \r\n    // This option prevents the UI from flickering when moving between pages\r\n    keepPreviousData: true, \r\n  });\r\n};\r\n\r\n// This hook provides a function to create a new student\r\nexport const useCreateStudent = () => {\r\n  const queryClient = useQueryClient();\r\n  return useMutation({\r\n    // The mutationFn is the function that performs the action (POST request).\r\n    // We use our imported service function here.\r\n    mutationFn: createStudent,\r\n    \r\n    // After the mutation is successful, we invalidate the 'students' cache.\r\n    // This tells TanStack Query to automatically refetch the student list.\r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    },\r\n  });\r\n};\r\n\r\n// This hook provides a function to update a student\r\nexport const useUpdateStudent = () => {\r\n  const queryClient = useQueryClient();\r\n  return useMutation({\r\n    // The mutation function now points to our updateStudent service\r\n    mutationFn: (variables) => updateStudent(variables.id, variables.data),\r\n    \r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    },\r\n  });\r\n};\r\n\r\n// This hook provides a function to delete a student\r\nexport const useDeleteStudent = () => {\r\n  const queryClient = useQueryClient();\r\n  return useMutation({\r\n    // The mutation function now points to our deleteStudent service\r\n    mutationFn: deleteStudent,\r\n    \r\n    onSuccess: () => {\r\n      queryClient.invalidateQueries({ queryKey: ['students'] });\r\n    },\r\n  });\r\n};\r\n"],"mappings":";;;;AAAA;;AAEA;AACA,SACEA,WAAW,EACXC,aAAa,EACbC,aAAa,EACbC,aAAa,QACR,aAAa,CAAC,CAAC;;AAEtB,SAASC,QAAQ,EAAEC,WAAW,EAAEC,cAAc,QAAQ,uBAAuB;;AAE7E;AACA,OAAO,MAAMC,cAAc,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;EAAAC,EAAA;EAC/C,OAAON,QAAQ,CAAC;IACd;IACAO,QAAQ,EAAE,CAAC,UAAU,EAAEH,IAAI,EAAEC,OAAO,CAAC;IAErC;IACA;IACAG,OAAO,EAAEA,CAAA,KAAMZ,WAAW,CAACQ,IAAI,EAAE,EAAE,EAAEC,OAAO,CAAC;IAE7C;IACAI,gBAAgB,EAAE;EACpB,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAH,EAAA,CAdaH,cAAc;EAAA,QAClBH,QAAQ;AAAA;AAcjB,OAAO,MAAMU,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMC,WAAW,GAAGV,cAAc,CAAC,CAAC;EACpC,OAAOD,WAAW,CAAC;IACjB;IACA;IACAY,UAAU,EAAEhB,aAAa;IAEzB;IACA;IACAiB,SAAS,EAAEA,CAAA,KAAM;MACfF,WAAW,CAACG,iBAAiB,CAAC;QAAER,QAAQ,EAAE,CAAC,UAAU;MAAE,CAAC,CAAC;IAC3D;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAI,GAAA,CAfaD,gBAAgB;EAAA,QACPR,cAAc,EAC3BD,WAAW;AAAA;AAcpB,OAAO,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAML,WAAW,GAAGV,cAAc,CAAC,CAAC;EACpC,OAAOD,WAAW,CAAC;IACjB;IACAY,UAAU,EAAGK,SAAS,IAAKpB,aAAa,CAACoB,SAAS,CAACC,EAAE,EAAED,SAAS,CAACE,IAAI,CAAC;IAEtEN,SAAS,EAAEA,CAAA,KAAM;MACfF,WAAW,CAACG,iBAAiB,CAAC;QAAER,QAAQ,EAAE,CAAC,UAAU;MAAE,CAAC,CAAC;IAC3D;EACF,CAAC,CAAC;AACJ,CAAC;;AAED;AAAAU,GAAA,CAZaD,gBAAgB;EAAA,QACPd,cAAc,EAC3BD,WAAW;AAAA;AAWpB,OAAO,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM;EAAAC,GAAA;EACpC,MAAMV,WAAW,GAAGV,cAAc,CAAC,CAAC;EACpC,OAAOD,WAAW,CAAC;IACjB;IACAY,UAAU,EAAEd,aAAa;IAEzBe,SAAS,EAAEA,CAAA,KAAM;MACfF,WAAW,CAACG,iBAAiB,CAAC;QAAER,QAAQ,EAAE,CAAC,UAAU;MAAE,CAAC,CAAC;IAC3D;EACF,CAAC,CAAC;AACJ,CAAC;AAACe,GAAA,CAVWD,gBAAgB;EAAA,QACPnB,cAAc,EAC3BD,WAAW;AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}